#!/bin/bash

##################################
## Lowbit GTD® by Task Warrior© ##
##################################

##########
# Config #
##########

# [System]
gtdBannerString="Lowbit Inspector"
gtdAreas="Business Career Family Finances Health Hobbies Love Social Spiritual Work"
gtdContexts="home business work guarulhos"
gtdRefreshInterval=30
gtdTaskExec="task rc.verbose=nothing"
gtdTerminatorString="done"
# [Capture]
#
# [Clarify]
gtdClarifyNothingString="Nothing to clarify. Be happy. =)"
# [Organize]
#
# [Reflect]
#
# [Engage]
gtdEngageOverdueTitle="Overdue"
gtdEngageOverdueAmount=5
gtdEngageTodayTitle="Today!"
gtdEngageTodayAmount=5
gtdEngageReadyTitle="Next Actions"
gtdEngageReadyAmount=5
gtdEngageTomorrowTitle="Tomorrow"
gtdEngageTomorrowAmount=4
gtdEngageWeekTitle="This Week"
gtdEngageWeekAmount=3
gtdEngageMonthTitle="This Month"
gtdEngageMonthAmount=2
gtdEngageYearTitle="This Year"
gtdEngageYearAmount=1

#_______________________Do_not_cross_this_line_(kidding)_______________________#

#############
# Functions #
#############

# Shows the screen banner
function gtdBanner() {
  gtdMode=$1

  clear
  echo "--------------------------------------------------------------------------------"
  echo " You are in ${gtdBannerString} | ${gtdMode}"
  echo "--------------------------------------------------------------------------------"
  echo
}

# Create the contexts used by the tool
function gtdContextsCreate() {
  
  for context in `echo ${gtdContexts}`; do
    ${gtdTaskExec} context list | awk {'print $1'} | grep "${context}" > /dev/null
    gtdContextListRC=$?
    
    if [ ${gtdContextListRC} -ne 0 ] ; then
      gtdBanner "Contexts"
      echo "=> Setting initial contexts (this must be done just once):"
      echo
      ${gtdTaskExec} context define ${context} +${context}
    fi
  done

}

# GTD Phase #1 - Capture: Capturing ideas to be processed later
function gtdCapture() {
  gtdBanner "Capture"

  # Cleaning the context before start, so tasks won't get any tags
  ${gtdTaskExec} context none 2> /dev/null

  # Letting the user input its 'tasks' to the Inbox of Task Warrior
  echo "Type the things you need to capture (when you're done, type '${gtdTerminatorString}') "
  while [ "${usrCaptureString}" != "${gtdTerminatorString}" ]; do

    read -p "Capture: " usrCaptureString

    case "${usrCaptureString}" in
      "")
        echo "Nothing? If you're done, type '${gtdTerminatorString}'"
        ;;
      "${gtdTerminatorString}")
        break
        ;;
      *)
        ${gtdTaskExec} add "${usrCaptureString}"
        ;;
    esac

  done
}

# GTD Phase #2 - Clarify: Understanding the ideas previously captured
function gtdClarify() {

  # Cleaning the context before start
  ${gtdTaskExec} context none 2> /dev/null

  gtdClarifyContexts="${gtdContexts} continue"

  while [ `${gtdTaskExec} status:pending project: wait: count` -gt 0 ]; do

    unset usrClarifyRenameWhich

    gtdClarifyCount=`${gtdTaskExec} status:pending project: wait: count`
    gtdClarifyNext=`${gtdTaskExec} oldest project: wait: limit:1 | awk '{print $1}' | head -n1`
    gtdBanner "Clarify"
    echo "Needing Clarify: ${gtdClarifyCount}"
    echo
    echo "Next: ${gtdClarifyNext}"
    ${gtdTaskExec} "${gtdClarifyNext}" long
    echo
    
    # Questions
    echo "Options:"
    select usrClarifyAction in "Action" "Someday" "Goal" "Habit" "Done" "Trash" "Quit"; do
      case "${usrClarifyAction}" in
        "Action")

          echo "Which Area?"
          select usrClarifyCategory in ${gtdAreas}; do
            task ${gtdClarifyNext} modify project:"${usrClarifyCategory}"
            break
          done

          echo "Is it part of a Project?"
          select usrClarifyProjectBool in "Yes" "No"; do
            case ${usrClarifyProjectBool} in
              "Yes")
                echo "Available Projects:"
                ${gtdTaskExec} project:"${usrClarifyCategory}" projects
                echo

                read -p "Which Project? " usrClarifyProjectWhich
                if [ -n "${usrClarifyProjectWhich}" ]; then
                  task ${gtdClarifyNext} modify project:"${usrClarifyCategory}"."${usrClarifyProjectWhich}"
                  echo
                fi

                break
                ;;
              "No")
                break
                ;;
            esac
          done

          echo "What is the next Action? Do you need to rename it?"
          select usrClarifyRenameBool in "Yes" "No"; do
            case ${usrClarifyRenameBool} in
              "Yes")
                while [ -z "${usrClarifyRenameWhich}" ]; do
                  read -p "Type the new name of the task: " usrClarifyRenameWhich
                done

                task ${gtdClarifyNext} modify description:"${usrClarifyRenameWhich}"

                break
                ;;
              "No")
                break
                ;;
            esac
          done

          echo "Which are the contexts? (select once at a time, then select 'continue')"
          select usrClarifyContext in ${gtdClarifyContexts}; do
            case "${usrClarifyContext}" in
              "continue")
                break
                ;;
              *)
                task ${gtdClarifyNext} modify +"${usrClarifyContext}"
                ;;
            esac
          done

          echo "What is the Priority?"
          select usrClarifyPriority in "High" "Medium" "Low" "None"; do
            case ${usrClarifyPriority} in
              "High")
                task ${gtdClarifyNext} modify priority:H
                break
                ;;
              "Medium")
                task ${gtdClarifyNext} modify priority:M
                break
                ;;
              "Low")
                task ${gtdClarifyNext} modify priority:L
                break
                ;;
              "None")
                task ${gtdClarifyNext} modify priority:
                break
                ;;
            esac
          done

          echo "Does it have a Due Date?"
          select usrClarifyDateBool in "Yes" "No"; do
            case ${usrClarifyDateBool} in
              "Yes")
                taskDateRC=1
                while [ ${taskDateRC} -ne 0 ]; do

                  read -p "Type the Due Date, or 'none' to skip: " usrClarifyDateWhich
                    case ${usrClarifyDateWhich} in
                      "none")
                        task ${gtdClarifyNext} modify due:
                        taskDateRC=$?
                        ;;
                      "")
                        echo "No Due Date? If so, type 'none'"
                        ;;
                      *)
                        task ${gtdClarifyNext} modify due:"${usrClarifyDateWhich}"
                        taskDateRC=$?
                        ;;
                    esac
                done

                break
                ;;
              "No")
                task ${gtdClarifyNext} modify due:
                break
                ;;
            esac
          done

          echo "Is it recurrent?"
          select usrClarifyRecurrenceBool in "Yes" "No"; do
            case ${usrClarifyRecurrenceBool} in
              "Yes")
                taskRecurrenceRC=1
                while [ ${taskRecurrenceRC} -ne 0 ]; do

                  read -p "Type the Recurrence, or 'none' to skip: " usrClarifyRecurrenceWhich
                    case ${usrClarifyRecurrenceWhich} in
                      "none")
                        task ${gtdClarifyNext} modify recur:
                        taskRecurrenceRC=$?
                        ;;
                      "")
                        echo "No Recurrence? If so, type 'none'"
                        ;;
                      *)
                        task ${gtdClarifyNext} modify recur:"${usrClarifyRecurrenceWhich}"
                        taskRecurrenceRC=$?
                        ;;
                    esac
                done

                break
                ;;
              "No")
                break
                ;;
            esac
          done

          echo "Is it Urgent?"
          select usrClarifyUrgent in "Yes" "No"; do
            case ${usrClarifyUrgent} in
              "Yes")
                task ${gtdClarifyNext} modify +next
                break
                ;;
              "No")
                break
                ;;
            esac
          done

          echo "Can it be done in 5 Minutes or less?"
          select usrClarify5Minutes in "Yes" "No"; do
            case ${usrClarify5Minutes} in
              "Yes")
                task ${gtdClarifyNext} modify +next
                break
                ;;
              "No")
                break
                ;;
            esac
          done

          break

          ;;

        "Someday")
          task ${gtdClarifyNext} modify project:Someday
          task tags          

          unset usrClarifySomedayList

          while [ "${usrClarifySomedayList}" != "${gtdTerminatorString}" ]; do
            echo "Which lists? (once at time - when you're done, type '${gtdTerminatorString}')"
            read -p "List: " usrClarifySomedayList
            case "${usrClarifySomedayList}" in
              "${gtdTerminatorString}")
                break
                ;;
              *)
                task ${gtdClarifyNext} modify +"${usrClarifySomedayList}"
                ;;
            esac
          done

          break

          ;;

        "Goal")
          echo "Soon..."
          ;;

        "Habit")
          echo "Soon..."
          ;;

        "Done")
          task ${gtdClarifyNext} done
          break
          ;;

        "Trash")
          task ${gtdClarifyNext} delete
          break
          ;;

        "Quit")
          exit
          ;;
      esac
    done



  done

  gtdBanner "Clarify"
  echo "${gtdClarifyNothingString}"

}

# GTD Phase #3 - Organize: Checking the Contexts, Projects and Lists
function gtdOrganize() {
  gtdBanner "Organize"

  echo "Organize your System:"
  select usrOrganizeOption in "Contexts" "Projects" "Lists" "Calendar" "Quit"; do
    case ${usrOrganizeOption} in
      "Contexts")
        echo
        echo "Your contexts are:"
        task context list
        ;;

      "Projects")
        unset usrOrganizeProject
        echo "Projects:"
        select usrOrganizeProjectsMode in "All" "Summary" "Back"; do
          case ${usrOrganizeProjectsMode} in

            "All")            
              task summary            
              ;;

            "Summary")
              
              echo
              echo "Projects by Area:"
              echo
            
              for area in `echo $gtdAreas`; do
                areaOutput=`${gtdTaskExec} projects project:"${area}". | tail -n1`
                echo "${areaOutput}" | grep "No project" > /dev/null 2>&1
                areaOutputRC=$?
                if [ ${areaOutputRC} -ne 0 ]; then
                  areaProjectsTotal=`echo "${areaOutput}" | cut -d' ' -f1`
                  areaProjectsReal=`echo "${areaProjectsTotal}-1" | bc`
                  echo "${area}: ${areaProjectsReal}"
                else
                  echo "${area}: --"
                fi
              done
              ;;
              
            "Back")
              break
              ;;

          esac
        done

        ;;

      "Lists")
        ${gtdTaskExec} tags
        ;;

      "Calendar")
        ${gtdTaskExec} calendar
        ;;

      "Quit")
        break
        ;;

    esac
  done

}

# GTD Phase #4 - Reflect: Cleaning up and Reviewing the system
function gtdReflect() {
  true
}

# GTD Phase #5 - Engage: Getting Things Done
function gtdEngage() {

  gtdBanner "Engage - Context: <SELECT>"
  
  echo "What are your current Context?"
  select usrEngageContext in ${gtdContexts}; do
    ${gtdTaskExec} context "${usrEngageContext}"
    break
  done

  while [ true ]; do
    ${gtdTaskExec} context "${usrEngageContext}"
    gtdBanner "Engage - Context: ${usrEngageContext}"
    gtdQuery "${gtdEngageOverdueTitle}" "next +OVERDUE" "${gtdEngageOverdueAmount}"
    gtdQuery "${gtdEngageTodayTitle}" "next +TODAY" "${gtdEngageTodayAmount}"
    gtdQuery "${gtdEngageReadyTitle}" "ready" "${gtdEngageReadyAmount}"
    gtdQuery "${gtdEngageTomorrowTitle}" "next +TOMORROW -CHILD" "${gtdEngageTomorrowAmount}"
    gtdQuery "${gtdEngageWeekTitle}" "next +WEEK -CHILD -OVERDUE" "${gtdEngageWeekAmount}"
    gtdQuery "${gtdEngageMonthTitle}" "next +MONTH -CHILD -OVERDUE" "${gtdEngageMonthAmount}"
    gtdQuery "${gtdEngageYearTitle}" "next +YEAR -CHILD -OVERDUE" "${gtdEngageYearAmount}"

    sleep ${gtdRefreshInterval}
  done
}

function gtdQuery() {
  queryTitle=$1
  queryFilter=$2
  queryAmount=$3

  if [ ${queryAmount} -le 0 ]; then
    return
  fi

  echo "=> ${queryTitle} (${queryAmount}) <="
  ${gtdTaskExec} ${queryFilter} limit:${queryAmount}
  echo
}

############
# GTD Time #
############

if [ $1 ]; then
  usrAction=$1
  gtdContextsCreate
else
  echo "Syntax:"
  echo "  `basename $0` OPTION"
  echo
  echo "Options:"
  echo "  capture   - Collect ideas (everytime something pops up in your mind)"
  echo "  clarify   - Understand ideas (every 1 or 2 days)"
  echo "  organize  - Check your system (when you feel like things are messy)"
  echo "  reflect   - Update your system (once a week - review your lists)"
  echo "  engage    - Get Things Done! (everyday - the major portion of time)"
  exit 1
fi

case $usrAction in
  "capture")  gtdCapture                        ;;
  "clarify")  gtdClarify                        ;;
  "organize") gtdOrganize                       ;;
  "reflect")  gtdReflect                        ;;
  "engage")   gtdEngage                         ;;
  *)          echo "Wrong syntax. You suck..."  ;;
esac















